#pragma once

class LocalPlayer : public Actor {
public:
	virtual void resolveDeathLoot(int param_1, class ActorDamageSource* param_2);
	virtual void _guard_check_icall14();
	virtual void setSleeping(bool param_1);
	virtual void setSprinting(bool param_1);
	virtual void playAmbientSound();
	virtual class LevelSoundEvent* getAmbientSound();
	virtual int getAmbientSoundPostponeTicks();
	virtual int getAmbientSoundPostponeTicksRange();
	virtual class TextureUVCoordinateSet* getItemInHandIcon(class ItemStack* param_1, int param_2);
	virtual float getSpeed();
	virtual void setSpeed(float param_1);
	virtual float getJumpPower();
	virtual bool hurtEffects(class ActorDamageSource* param_1, int param_2, bool param_3, bool param_4);
	virtual int getMeleeWeaponDamageBonus(class Mob* param_1);
	virtual int getMeleeKnockbackBonus();
	virtual void travel(class IMobMovementProxy* param_1, float param_2, float param_3, float param_4);
	virtual void travel(float param_1, float param_2, float param_3);
	virtual void applyFinalFriction(float param_1, bool param_2);
	virtual void updateWalkAnim();
	virtual void aiStep(class IMobMovementProxy* param_1);
	virtual void aiStep();
	virtual void pushActors();
	virtual void lookAt(class Actor* param_1, float param_2, float param_3);
	virtual bool isLookingAtAnEntity();
	virtual bool checkSpawnRules(bool param_1);
	virtual bool checkSpawnObstruction();
	virtual float getAttackAnim(float param_1);
	virtual int UndefinedFunc_293();
	virtual float stbir__support_zero1(class BlockPos* param_1);
	virtual float stbir__support_zero2(class BlockPos* param_1);
	virtual int getItemuseIntervalAxis();
	virtual int getTimeAlongSwing();
	virtual void _guard_check_icall1();
	virtual float getMaxHeadXRot();
	virtual class Mob* getLastHurtByMob();
	virtual void setLastHurtByMob(class Mob* param_1);
	virtual class Player* getLastHurtByPlayer();
	virtual void setLastHurtByPlayer(class Player* param_1);
	virtual class Mob* getLastHurtMob();
	virtual void setLastHurtMob(class Actor* param_1);
	virtual bool getReturnPolicy1();
	virtual bool doHurtTarget(class Actor* param_1);
	virtual bool getReturnPolicy2();
	virtual void leaveCaravan();
	virtual void joinCaravan(class Mob* param_1);
	virtual bool hasCaravanTail();
	virtual class ActorUniqueID* getCaravanHead();
	virtual int getArmorValue();
	virtual float getArmorCoverPercentage();
	virtual void hurtArmor(class ActorDamageSource* param_1, int param_2, uint32_t* param_3);
	virtual void hurtArmor(class ActorDamageSource* param_1, int param_2);
	virtual void hurtArmorSlot(class ActorDamageSource* param_1, int param_2, class ArmorSlot* param_3);
	virtual void setDamagedArmor(class ArmorSlot* param_1, class ItemStack* param_2);
	virtual void _guard_check_icall2();
	virtual void sendArmor(uint32_t* param_1);
	virtual void containerChanged(int param_1);
	virtual void updateEquipment();
	virtual int clearEquipment();
	virtual class std::vector<class ItemStack*> getAllArmor();
	virtual std::vector<int, int> getAllArmorID();
	virtual class std::vector<class ItemStack> getAllHand();
	virtual class std::vector<class ItemStack> getAllEquipment();
	virtual int getArmorTypeHash();
	virtual void dropEquipmentOnDeath();
	virtual void dropEquipmentOnDeath(class ActorDamageSource* param_1, int param_2);
	virtual void clearVanishEnchantedItemsOnDeath();
	virtual void sendInventory(bool param_1);
	virtual int getDamageAfterMagicAbsorb(class ActorDamageSource* param_1, int param_2);
	virtual bool createAIGoals();
	virtual void _guard_check_icall3();
	virtual bool setItemSlot(class EquipmentSlot* param_1, class ItemStack* param_2);
	virtual void setTransitioningSitting(bool param_1);
	virtual void attackAnimation(class Actor* param_1, float param_2);
	virtual int getAttackTime();
	virtual float stbir__support_zero3(class BlockPos* param_1);
	virtual bool canExistWhenDisallowMob();
	virtual __int64 __vcrt_uninitialize1();
	virtual void ascendLadder();
	virtual void ascendBlockByJumping1();
	virtual void ascendBlockByJumping2();
	virtual void descendScaffolding();
	virtual bool canAscendCurrentBlockByJumping();
	virtual void dropContainer();
	virtual __int64* initBodyControl();
	virtual void jumpFromGround(class IMobMovementProxy* param_1);
	virtual void jumpFromGround();
	virtual void updateAi();
	virtual void UndefinedFunc_353();
	virtual void _guard_check_icall();
	virtual int getDamageAfterEnchantReduction(class ActorDamageSource* param_1, int param_2);
	virtual int getDamageAfterArmorAbsorb(class ActorDamageSource* param_1, int param_2);
	virtual void dropBags();
	virtual void tickDeath();
	virtual void updateGliding();
	virtual __int64 __vcrt_uninitialize2();
};
